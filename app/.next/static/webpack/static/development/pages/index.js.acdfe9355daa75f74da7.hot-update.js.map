{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.acdfe9355daa75f74da7.hot-update.js","sources":["webpack:///./components/DateInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from './Input';\nimport { isValidDate } from '../utils';\nimport useDebounce from '../hooks/useDebounce';\n\nconst DateInput = props => {\n  const { dispatchToParent, preFill } = props;\n  const [date, setDate] = useState(preFill);\n  const [isValid, setIsValid] = useState(() => isValidDate(preFill));\n  const [isDeleting, setIsDeleting] = useState(false);\n  const debouncedValue = useDebounce(date, 500);\n\n  useEffect(() => {\n    dispatchToParent({\n      zip: preFill,\n      validZip: !preFill.length ? null : isValidDate(preFill)\n    });\n  }, [dispatchToParent, preFill]);\n\n  function handleDate(event) {\n    let dateVal = event.target.value;\n    const dateStr = String(dateVal);\n\n    if (!Number.isNaN(dateVal * 1) || dateStr.includes('/')) {\n      // add - if user is not deleting and length is 2 or 5\n      if (!isDeleting && (dateVal.length === 2 || dateVal.length === 5)) {\n        dateVal = `${dateVal}/`;\n      }\n\n      // check if last digit is / and then remove it\n      if (dateStr.endsWith('/') && isDeleting) {\n        dateVal = dateVal.slice(0, dateStr.length - 1);\n      }\n\n      const valid = isValidDate(dateVal);\n      setIsValid(!dateVal.length ? null : valid);\n      setDate(dateVal);\n      dispatchToParent({\n        date: dateVal,\n        validDate: !dateVal.length ? null : valid\n      });\n    }\n  }\n\n  function getKeyCode(event) {\n    setIsDeleting(event.which === 8);\n  }\n\n  return (\n    <React.Fragment className=\"field\">\n      {props.label.length ? (\n        <label className=\"label\">{props.label}</label>\n      ) : null}\n      <div\n        className={`control has-icons-right ${\n          props.loading ? 'is-loading' : ''\n        }`}\n      >\n        <Input\n          type=\"text\"\n          disabled={props.disabled}\n          name={props.name}\n          placeholder={props.disabled ? 'Disabled' : props.placeholder}\n          className={`input ${props.className} ${\n            debouncedValue.length ? (isValid ? 'is-success' : 'is-danger') : ''\n          }`}\n          onChange={handleDate}\n          onKeyDown={getKeyCode}\n          value={date}\n          maxLength={10}\n        />\n        {props.iconClass.length && !debouncedValue.length ? (\n          <span className=\"kt-input-icon__icon kt-input-icon__icon--right\">\n            <span>\n              <i className={`${props.iconClass}`} />\n            </span>\n          </span>\n        ) : null}\n        {!isValid && debouncedValue.length ? (\n          <React.Fragment>\n            <span className=\"icon is-small is-right\">\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n            <div className=\"help is-danger\">\n              {`${props.errMsg} `}\n              üëé\n            </div>\n          </React.Fragment>\n        ) : debouncedValue.length ? (\n          <React.Fragment>\n            <span className=\"icon is-small is-right\">\n              <i className=\"fas fa-check\" />\n            </span>\n            <div className=\"help is-success\">\n              {`${props.successMsg} `}\n              üëç\n            </div>\n          </React.Fragment>\n        ) : null}\n      </div>\n      {props.helpText.length ? (\n        <span className=\"form-text text-muted\">{props.helpText}</span>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nDateInput.defaultProps = {\n  name: 'date',\n  placeholder: '__/__/____',\n  helpText: 'MM/DD/YYYY',\n  className: 'form-control',\n  errMsg: 'Please enter valid date (mm/dd/yyyy)',\n  successMsg: 'Date is valid',\n  preFill: '',\n  iconClass: 'la la-calendar',\n  label: 'Date',\n  disabled: false,\n  canBeFuture: false,\n  dispatchToParent: () => {}\n};\n\nDateInput.propTypes = {\n  errMsg: PropTypes.string,\n  dispatchToParent: PropTypes.func,\n  helpText: PropTypes.string,\n  label: PropTypes.string,\n  preFill: PropTypes.string,\n  placeholder: PropTypes.string,\n  successMsg: PropTypes.string,\n  className: PropTypes.string,\n  iconClass: PropTypes.string,\n  name: PropTypes.string,\n  disabled: PropTypes.bool,\n  canBeFuture: PropTypes.bool\n};\n\nexport default DateInput;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;;;;A","sourceRoot":""}